# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'

VAGRANTFILE_API_VERSION = "2"


# fetch dev's custom settings
file = 'vagrant.yml'

unless File.file?(file)
    FileUtils.cp(file + '.default', file)
end

settings = YAML.load_file File.join __dir__, file

cpus = settings['virtualbox']['cpus']
ram = settings['virtualbox']['ram']

internal = settings['path']['internal']

network_type = settings['network']['type']
network_ip = settings['network']['ip']

tld = settings['tld']


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = "ubuntu/trusty64"

    unless network_ip.empty?
        config.vm.network network_type, ip: network_ip
    else
        config.vm.network network_type
    end

    config.vm.provision :shell, inline: $setup
    config.vm.provision :shell, inline: $startup,
      run: "always"

    config.vm.synced_folder internal, "/var/www/vhosts/testsiteinternal/httpdocs"

    config.vm.provider "virtualbox" do |vb|
        # Display the VirtualBox GUI when booting the machine
        vb.gui = false
        # Customize the amount of memory on the VM:
        vb.memory = ram
        # set number of cpus to use:
        vb.cpus = cpus
        # network speedup
        vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
        vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
end



$vhost_force_ssl = <<VHOSTFORCESSL
<VirtualHost *:80>
    ServerAdmin admin@testsite.co.uk

    ServerName testsite.#{tld}
    ServerAlias internal.testsite.#{tld}

    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

    DocumentRoot /var/www/html/
</VirtualHost>
VHOSTFORCESSL

$vhost_internal = <<VHOSTINTERNAL
<VirtualHost *:443 *:8004>
    ServerAdmin admin@testsite.co.uk
    ServerName internal.testsite.#{tld}

    SSLEngine on
    SSLCertificateFile /var/www/vhosts/testsiteinternal/httpdocs/ssl/internal.testsite.#{tld}.crt
    SSLCertificateKeyFile /var/www/vhosts/testsiteinternal/httpdocs/ssl/internal.testsite.#{tld}.key

    DocumentRoot /var/www/vhosts/testsiteinternal/httpdocs/
    <Directory /var/www/vhosts/testsiteinternal/httpdocs/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        allow from all
        AddOutputFilterByType DEFLATE text/plain text/html text/xml tex$
    </Directory>
    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    <Directory "/usr/lib/cgi-bin">
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/develop-testsiteinternal_error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    CustomLog ${APACHE_LOG_DIR}/develop-testsiteinternal_access.log combined

    Alias /doc/ "/usr/share/doc/"
    <Directory "/usr/share/doc/">
        Options Indexes MultiViews FollowSymLinks
        AllowOverride None
        Order deny,allow
        Deny from all
        Allow from 127.0.0.0/255.0.0.0 ::1/128
    </Directory>
</VirtualHost>
VHOSTINTERNAL

$phpiniapache = <<PHPINI
; massive errors!
display_errors = on
html_errors = on

; Added for xdebug
[XDebug]
xdebug.remote_enable=1
xdebug.remote_autostart = 1
xdebug.remote_handler=dbgp
xdebug.remote_mode=req
xdebug.remote_host=192.168.33.1
xdebug.remote_port=9001
xdebug.remote_log = /var/log/xdebug.log
xdebug.auto_trace = 1
PHPINI

$phpini = <<PHPINI
extension=stats.so
PHPINI

$setup = <<SCRIPT
cd ~/
set -ex

PHPINI_APACHE="/etc/php/7.2/apache2/php.ini"
PHPINI_CLI="/etc/php/7.2/cli/php.ini"

# install prerequisites
add-apt-repository ppa:ondrej/php # php 7.2
apt-get update -qq
apt-get upgrade -qy
apt-get install -q -y apache2 curl php7.2 openssl memcached imagemagick php7.2-memcache php7.2-mysql php7.2-imagick php7.2-curl php7.2-mbstring php7.2-xml php7.2-gd php7.2-ssh2 php7.2-zip
# dev stuff
apt-get install -q -y php7.2-xdebug php7.2-dev
update-alternatives --set php /usr/bin/php7.2


# ensure apache is set to launch at boot
update-rc.d apache2 enable

# required to make things work
a2enmod expires
a2enmod file_cache
a2enmod php7.2
a2enmod rewrite
a2enmod ssl

# other mods loaded onto production server
a2enmod actions
a2enmod alias
a2enmod auth_basic
a2enmod auth_digest
a2enmod authn_anon
a2enmod authn_dbm
a2enmod authn_file
a2enmod authnz_ldap
a2enmod authz_dbm
a2enmod authz_groupfile
a2enmod authz_host
a2enmod authz_owner
a2enmod authz_user
a2enmod autoindex
a2enmod cache
a2enmod cgi
a2enmod deflate
a2enmod dir
a2enmod env
a2enmod ext_filter
a2enmod headers
a2enmod include
a2enmod mime
a2enmod mime_magic
a2enmod mpm_prefork
a2enmod negotiation
a2enmod setenvif
a2enmod status
a2enmod substitute
a2enmod suexec
a2enmod unique_id
a2enmod usertrack
# a2enmod authn_alias
# a2enmod authn_default
# a2enmod authz_default
# a2enmod core
# a2enmod disk_cache
# a2enmod http
# a2enmod ldap_module
# a2enmod log_config
# a2enmod logio
# a2enmod pagespeed
# a2enmod perl
# a2enmod proxy
# a2enmod proxy_ajp
# a2enmod proxy_balancer
# a2enmod proxy_connect
# a2enmod proxy_ftp
# a2enmod proxy_http
# a2enmod security2
# a2enmod so
# a2enmod spelling
# a2enmod userdir
# a2enmod version
# a2enmod vhost

#phpenmod mcrypt

echo -e "ServerName testsite.#{tld}" >> /etc/apache2/apache2.conf

echo -e "#{$vhost_internal}" > /etc/apache2/sites-available/internal.conf
echo -e "#{$vhost_force_ssl}" > /etc/apache2/sites-available/force_ssl.conf
a2dissite 000-default
a2ensite internal.conf
a2ensite force_ssl.conf

# add basic utilities
mkdir -p /var/www/vhosts/utilities/public
echo -e '<h1>Vagrant</h1><a href="phpinfo.php">PHP Info</a>' > /var/www/vhosts/utilities/public/index.php
echo -e "<?php phpinfo() ?>" > /var/www/vhosts/utilities/public/phpinfo.php

# install ioncube
curl -so ioncube.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz
tar -xvzf ioncube.tar.gz -C /usr/local

# append xdebug config
echo -e "#{$phpiniapache}" >> $PHPINI_APACHE
echo -e "#{$phpini}" >> $PHPINI_APACHE
echo -e "#{$phpini}" >> $PHPINI_CLI

# add extensions to php.ini
extensionsdir=$(php-config --extension-dir)
# ioncube
echo -e 'zend_extension="/usr/local/ioncube/ioncube_loader_lin_7.2.so"' >> $PHPINI_APACHE
echo -e 'zend_extension="/usr/local/ioncube/ioncube_loader_lin_7.2.so"' >> $PHPINI_CLI
# xdebug - (build path dynamically)
echo -e -n 'zend_extension="' >> $PHPINI_APACHE
echo -e -n $extensionsdir >> $PHPINI_APACHE
echo -e '/xdebug.so"' >> $PHPINI_APACHE
echo -e -n 'zend_extension="' >> $PHPINI_CLI
echo -e -n $extensionsdir >> $PHPINI_CLI
echo -e '/xdebug.so"' >> $PHPINI_CLI

# install testsite's root SSL cert for development
mkdir -p /usr/share/ca-certificates/testsite
openssl x509 -inform PEM -in /var/www/vhosts/testsiteinternal/httpdocs/ssl/root/testsite_root_ca.pem -out /usr/share/ca-certificates/testsite/testsite_root_ca.crt
chmod 755 /usr/share/ca-certificates/testsite/
chmod 644 /usr/share/ca-certificates/testsite/testsite_root_ca.crt
update-ca-certificates

# make necessary directories
mkdir -p /admin/logs

curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

pecl install stats-2.0.3

service apache2 reload
SCRIPT

$startup = <<STARTUP
cd ~/
set -ex

apt-get update -q
apt-get upgrade -qy

service apache2 start
STARTUP
